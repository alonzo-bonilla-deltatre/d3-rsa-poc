trigger:
  batch: true
  branches:
    include:
      - develop
      - beta
      - dev

pool:
  name: WebPlu
  demands:
    - Docker

resources:
  repositories:
    - repository: templates
      name: SXP-DevOps/d3ops-pipelines-templates
      type: git
      ref: "refs/tags/build/common-solution/steps/1.2.0"

variables:
  - group: SonarSecret
  - group: CodeArtifact_AWS_Secret
  - name: disable.coverage.autogenerate
    value: "true"
  - name: DOCKER_BUILDKIT
    value: 0
  - name: _netcoreVersion
    value: "6.0"
  - name: _azureContainerRegistry
    value: "ForgeIntegrationsDockerRegistry"
  - name: _container_registry_endpoint
    value: "forgeintegrations.azurecr.io"
  - name: _container_registry_name
    value: "forgeintegrations"
  - name: SonarQubeScannerVersion
    value: "5.0.1"
  - name: _imageVersion
    value: $(GitFinalVersion)
  - name: _prjName
    value: "Deltatre.Frontend.React.Poc.Web"
  - name: _slnname
    value: "Deltatre.Frontend.React.Poc.Web"
  - name: _frontendImageName
    value: "integrations/poc/frontend/fe"
  - name: _storybookImageName
    value: "integrations/poc/frontend/storybook"
  - name: _frontendDockerFile
    value: "Frontend.Dockerfile"
  - name: _npmFrontendDockerFile
    value: "NpmFrontend.Dockerfile"
  - name: _storybookDockerFile
    value: "Storybook.Dockerfile"
  - name: _npm_version
    value: "18"

steps:
  # Validate PullRequest title format (adjust the PATTERN regex based on your project needs)
  - script: |
      pr_title="$(curl --silent -u azdo:$SYSTEM_ACCESSTOKEN \
        $(System.CollectionUri)_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)?api-version=5.1 \
        | grep -Po '"title":.*?[^\\]",' | cut -d'"' -f4)"
      echo "Extracted PR title: $pr_title"
      echo "##vso[task.setvariable variable=PR_TITLE]$pr_title"
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    displayName: Extract pull request title
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

  - script: |
      # Define the regex pattern
      PATTERN='^[0-9]+:[[:space:]].{1,100}$'

      # Display the PR title
      echo "PR Title: $PR_TITLE"

      # Validate the PR title using regex
      if [[ ! $PR_TITLE =~ $PATTERN ]]; then
        echo "PR title does not match the required format (e.g., 306193: add new feature). Please update the title."
        exit 1
      fi
    displayName: Validate PR Title
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  
  # Create GitFinalVersion variable
  - template: build/common-solution/steps/set-version-universal.yml@templates

  # Build Frontend DockerFile per Owasp
  - template: build/common-solution/steps/docker-build-for-ci.yml@templates
    parameters:
      DOCKER_FILE: "$(_npmFrontendDockerFile)"
      IMAGE_VERSION: npm_$(_imageVersion)
      PROJECT_NAME: $(_prjName)
      SLN_NAME: $(_slnname)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      NPM_VERSION: $(_npm_version)
      ASS_VERSION: $(_imageVersion)

  - template: build/common-solution/steps/owasp-node-modules.yml@templates
    parameters:
      IMAGE_VERSION: "npm_$(_imageVersion)"
      SOLUTION_NAME: ""
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      SOLUTION_PATH: "${PWD}"
      SRC_FOLDER: ""

  - template: build/common-solution/steps/OWASP-dependency-check.yml@templates
    parameters:
      projectname: Deltatre.Frontend.React.Poc.Frontend
      report_path: /src/OWASPreports
      scanpath: ./

  - template: build/common-solution/steps/owasp-clean.yml@templates
    parameters:
      IMAGE_VERSION: "npm_$(_imageVersion)"

  # Build Frontend DockerFile per Frontend
  - template: build/common-solution/steps/docker-build-for-ci.yml@templates
    parameters:
      DOCKER_FILE: "$(_frontendDockerFile)"
      IMAGE_VERSION: $(_imageVersion)
      PROJECT_NAME: $(_prjName)
      SLN_NAME: $(_slnname)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      NPM_VERSION: $(_npm_version)
      ASS_VERSION: $(_imageVersion)

  # Docker push Frontend Image
  - template: build/common-solution/steps/docker-push.yml@templates
    parameters:
      IMAGE_NAME: $(_frontendImageName)
      IMAGE_VERSION: $(_imageVersion)
      CONTAINER_REGISTRY: $(_azureContainerRegistry)
  
  # Build Storybook DockerFile per Storybook
  - template: build/common-solution/steps/docker-build-for-ci.yml@templates
    parameters:
      DOCKER_FILE: "$(_storybookDockerFile)"
      IMAGE_VERSION: $(_imageVersion)
      PROJECT_NAME: $(_prjName)
      SLN_NAME: $(_slnname)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_storybookImageName)
      NPM_VERSION: $(_npm_version)
      ASS_VERSION: $(_imageVersion)

  # Docker push Storybook Image
  - template: build/common-solution/steps/docker-push.yml@templates
    parameters:
      IMAGE_NAME: $(_storybookImageName)
      IMAGE_VERSION: $(_imageVersion)
      CONTAINER_REGISTRY: $(_azureContainerRegistry)

  # Clean files build server
  - template: build/common-solution/steps/delete-files.yml@templates

  # Removing images
  - template: build/common-solution/steps/docker-remove-image.yml@templates
    parameters:
      IMAGE_VERSION: npm_$(_imageVersion)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_storybookImageName)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      
  # Removing images
  - template: build/common-solution/steps/docker-remove-image.yml@templates
    parameters:
      IMAGE_VERSION: $(_imageVersion)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      
  # Removing images
  - template: build/common-solution/steps/docker-remove-image.yml@templates
    parameters:
      IMAGE_VERSION: $(_imageVersion)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_storybookImageName)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)