trigger:
  batch: true
  branches:
    include:
      - beta

pool:
  name: WebPlu
  demands:
    - Docker

resources:
  repositories:
    - repository: templates
      name: SXP-DevOps/d3ops-pipelines-templates
      type: git
      ref: "refs/tags/build/common-solution/steps/1.1.3"

variables:
  - group: SonarSecret
  - name: disable.coverage.autogenerate
    value: "true"
  - name: DOCKER_BUILDKIT
    value: 0
  - name: _netcoreVersion
    value: "6.0"
  - name: _azureContainerRegistry
    value: "ForgeIntegrationsDockerRegistry"
  - name: _container_registry_endpoint
    value: "forgeintegrations.azurecr.io"
  - name: _container_registry_name
    value: "forgeintegrations"
  - name: SonarQubeScannerVersion
    value: "5.0.1"
  - name: _imageVersion
    value: $(GitFinalVersion)
  - name: _prjName
    value: "Deltatre.Frontend.React.Poc.Web"
  - name: _slnname
    value: "Deltatre.Frontend.React.Poc.Web"
  - name: _frontendImageName
    value: "integrations/poc/frontend/fe"
  - name: _frontendDockerFile
    value: "Frontend.Dockerfile"
  - name: _npmFrontendDockerFile
    value: "NpmFrontend.Dockerfile"
  - name: _npm_version
    value: "18"

steps:
  # Create GitFinalVersion variable
  - template: build/common-solution/steps/set-version-universal.yml@templates

  # Build Frontend DockerFile per Owasp
  - template: build/common-solution/steps/docker-build-for-ci.yml@templates
    parameters:
      DOCKER_FILE: "$(_npmFrontendDockerFile)"
      IMAGE_VERSION: npm_$(_imageVersion)
      PROJECT_NAME: $(_prjName)
      SLN_NAME: $(_slnname)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      NPM_VERSION: $(_npm_version)
      ASS_VERSION: $(_imageVersion)

  - template: build/common-solution/steps/owasp-node-modules.yml@templates
    parameters:
      IMAGE_VERSION: "npm_$(_imageVersion)"
      SOLUTION_NAME: ""
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      SOLUTION_PATH: "${PWD}"
      SRC_FOLDER: ""
  
  - template: build/common-solution/steps/OWASP-dependency-check.yml@templates
    parameters:
      projectname: Deltatre.Frontend.React.Poc.Frontend
      report_path: /src/OWASPreports
      scanpath: ./

  - template: build/common-solution/steps/owasp-clean.yml@templates
    parameters:
      IMAGE_VERSION: "npm_$(_imageVersion)"

  # Build Frontend DockerFile per Frontend
  - template: build/common-solution/steps/docker-build-for-ci.yml@templates
    parameters:
      DOCKER_FILE: "$(_frontendDockerFile)"
      IMAGE_VERSION: $(_imageVersion)
      PROJECT_NAME: $(_prjName)
      SLN_NAME: $(_slnname)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      NPM_VERSION: $(_npm_version)
      ASS_VERSION: $(_imageVersion)
      YARN_BUILD_COMMAND: $(YARN_BUILD_COMMAND)
  
  # Docker push Frontend Image
  - template: build/common-solution/steps/docker-push.yml@templates
    parameters:
        IMAGE_NAME: $(_frontendImageName)
        IMAGE_VERSION: $(_imageVersion)
        CONTAINER_REGISTRY: $(_azureContainerRegistry)
  
  # Clean files build server
  - template: build/common-solution/steps/delete-files.yml@templates
  
  # Removing images
  - template: build/common-solution/steps/docker-remove-image.yml@templates
    parameters:
      IMAGE_VERSION: npm_$(_imageVersion)
      CONTAINER_REGISTRY_REPOSITORY_NAME: $(_frontendImageName)
      CONTAINER_REGISTRY_ENDPOINT: $(_container_registry_endpoint)